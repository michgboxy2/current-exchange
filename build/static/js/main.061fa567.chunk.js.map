{"version":3,"sources":["components/dropzone/Dropzone.js","components/progress/Progress.js","components/upload/Upload.js","App.js","serviceWorker.js","index.js"],"names":["Dropzone","props","state","hightlight","fileInputRef","React","createRef","openFileDialog","bind","onFilesAdded","onDragOver","onDragLeave","onDrop","this","disabled","current","click","evt","files","target","array","fileListToArray","event","preventDefault","disabed","setState","dataTransfer","list","i","length","push","item","className","onClick","style","cursor","ref","type","multiple","onChange","alt","src","Component","Progress","width","progress","Upload","getCurrencies","a","fetch","then","response","json","currency","currencyList","catch","e","toast","error","renderDownloadCsvButton","csvAvailable","data","disbursementRecords","uploading","uploadProgress","successfullUploaded","exportCSV","uploadFiles","sendRequest","renderActions","name","value","file","formData","FormData","append","method","body","percentage","opacity","success","defaultValue","map","key","renderProgress","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.061fa567.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Dropzone.css\";\n\nclass Dropzone extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hightlight: false };\n    this.fileInputRef = React.createRef();\n\n    this.openFileDialog = this.openFileDialog.bind(this);\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.onDragOver = this.onDragOver.bind(this);\n    this.onDragLeave = this.onDragLeave.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  openFileDialog() {\n    if (this.props.disabled) return;\n    this.fileInputRef.current.click();\n  }\n\n  onFilesAdded(evt) {\n    if (this.props.disabled) return;\n    const files = evt.target.files;\n    if (this.props.onFilesAdded) {\n      const array = this.fileListToArray(files);\n      this.props.onFilesAdded(array);\n    }\n  }\n\n  onDragOver(event) {\n    event.preventDefault();\n    if (this.props.disabed) return;\n    this.setState({ hightlight: true });\n  }\n\n  onDragLeave(event) {\n    this.setState({ hightlight: false });\n  }\n\n  onDrop(event) {\n    event.preventDefault();\n    if (this.props.disabed) return;\n    const files = event.dataTransfer.files;\n    if (this.props.onFilesAdded) {\n      const array = this.fileListToArray(files);\n      this.props.onFilesAdded(array);\n    }\n    this.setState({ hightlight: false });\n  }\n\n  fileListToArray(list) {\n    const array = [];\n    for (var i = 0; i < list.length; i++) {\n      array.push(list.item(i));\n    }\n    return array;\n  }\n\n  render() {\n    return (\n      <div\n        className={`Dropzone ${this.state.hightlight ? \"Highlight\" : \"\"}`}\n        onDragOver={this.onDragOver}\n        onDragLeave={this.onDragLeave}\n        onDrop={this.onDrop}\n        onClick={this.openFileDialog}\n        style={{ cursor: this.props.disabled ? \"default\" : \"pointer\" }}\n      >\n        <input\n          ref={this.fileInputRef}\n          className=\"FileInput\"\n          type=\"file\"\n          multiple\n          onChange={this.onFilesAdded}\n        />\n        <img\n          alt=\"upload\"\n          className=\"Icon\"\n          src=\"baseline-cloud_upload-24px.svg\"\n        />\n        <span>Upload Files</span>\n      </div>\n    );\n  }\n}\n\nexport default Dropzone;\n","import React, { Component } from \"react\";\r\nimport \"./Progress.css\";\r\n\r\nclass Progress extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ProgressBar\">\r\n        <div\r\n          className=\"Progress\"\r\n          style={{ width: this.props.progress + \"%\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Progress;\r\n","import React, { Component } from \"react\";\nimport Dropzone from \"../dropzone/Dropzone\";\nimport \"./Upload.css\";\nimport Progress from \"../progress/Progress\";\nimport { CSVLink } from \"react-csv\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: {},\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false,\n      disbursementRecords: [],\n      csvAvailable: false,\n      currencyList: [],\n      currency: \"\"\n    };\n\n    this.exportCSV = this.exportCSV.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  componentDidMount(){\n    this.getCurrencies();\n  }\n\n  onFilesAdded(files) {\n    this.setState({ files });\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async uploadFiles() {\n    this.setState({ uploadProgress: {}, uploading: true });\n    this.sendRequest(this.state.files);\n    try {\n      this.setState({ successfullUploaded: true, uploading: false });\n    } catch (e) {\n      this.setState({ successfullUploaded: true, uploading: false });\n      toast.error(e);\n    }\n  }\n\n  async sendRequest(file) {\n      const {currency} = this.state;\n      if(!currency){\n        toast.error('kindly select a base currency from the drop down');\n        return null;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file[0], file.name);\n    formData.append(\"baseCurrency\", currency);\n\n    fetch(\"http://127.0.0.1:3000/api/v1/disburse\", {\n      method: \"POST\",\n      body: formData\n    })\n      .then(response => response.json())\n      .then(data =>\n        this.setState({ disbursementRecords: data, csvAvailable: true })\n      )\n      .catch(e => {toast.error(e)});\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return (\n        <div className=\"ProgressWrapper\">\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\n          <img\n            className=\"CheckIcon\"\n            alt=\"done\"\n            src=\"baseline-check_circle_outline-24px.svg\"\n            style={{\n              opacity:\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n            }}\n          />\n        </div>\n      );\n    }\n  }\n\n  exportCSV() {\n    const headers = [\n      { label: \"Nonprofit\", Key: \"Nonprofit\" },\n      { label: `Total amount ${this.state.currency}`, Key: `Total amount ${this.state.currency}` },\n      { label: \"Total Fee\", Key: \"Total Fee\" },\n      { label: \"Number of Donations\", Key: \"Number of Donations\" }\n    ];\n  }\n\n  renderActions() {\n    if (this.state.files.length > 1) {\n      toast.error(\"Only one file is allowed for download\");\n    }\n\n    if (this.state.files.length === 1) {\n      if (this.state.successfullUploaded) {\n        return (\n          <button onClick={() => this.setState({ successfullUploaded: false })}>\n            Clear\n          </button>\n        );\n      } else {\n        return <button onClick={this.uploadFiles}>Upload</button>;\n      }\n    }\n  }\n\n  getCurrencies = async () => {\n      fetch(\"http://127.0.0.1:3000/api/v1/disburse\")\n      .then(response => response.json())\n      .then(currency => {\n        this.setState({ currencyList: currency });\n      })\n      .catch(e =>{\n      toast.error(e);\n      })\n   \n  };\n\n  renderDownloadCsvButton = () => {\n    if (this.state.csvAvailable) {\n      return (\n        <CSVLink data={this.state.disbursementRecords}>\n          <button>Download CSV</button>\n        </CSVLink>\n      );\n    }\n  };\n\n  render() {\n    const { csvAvailable, currency } = this.state;\n    let i;\n    if (csvAvailable) {\n      toast.success(\"click the download button to download csv file\");\n    }\n    return (\n      <div className=\"Upload\">\n        <span className=\"Title\">click to Upload Files</span>\n        <div className=\"Content\">\n          <div className=\"row\">\n            <Dropzone\n              onFilesAdded={this.onFilesAdded}\n              disabled={this.state.uploading || this.state.successfullUploaded}\n            />\n\n            <div className=\"col-md-5\">\n              <div className=\"input-group mb-1\">\n                <select\n                  className=\"custom-select\"\n                  name=\"currency\"\n                  value={this.state.currency}\n                  onChange={this.onChange}\n                >\n                  <option defaultValue>Select currency</option>\n                  {this.state.currencyList.map((currency, i) => {\n                      i++;\n                      return <option key={i} value={currency}>{currency}</option>\n                  })}\n                  \n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"Files\">\n            <div className=\"Row\">\n              <span className=\"Filename\">{this.state.files.name}</span>\n              {this.renderProgress(this.state.files)}\n            </div>\n          </div>\n        </div>\n        <div className=\"Actions\">{this.renderActions()}</div>\n        {this.renderDownloadCsvButton()}\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default Upload;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Upload from \"./components/upload/Upload\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Card\">\n          <Upload />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}